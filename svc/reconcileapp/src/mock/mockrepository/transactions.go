// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositories/transactions.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/hasemeneh/PoC-reconciliation/svc/reconcileapp/src/models"
	sqlx "github.com/jmoiron/sqlx"
)

// MockTransactionsRepo is a mock of TransactionsRepo interface.
type MockTransactionsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsRepoMockRecorder
}

// MockTransactionsRepoMockRecorder is the mock recorder for MockTransactionsRepo.
type MockTransactionsRepoMockRecorder struct {
	mock *MockTransactionsRepo
}

// NewMockTransactionsRepo creates a new mock instance.
func NewMockTransactionsRepo(ctrl *gomock.Controller) *MockTransactionsRepo {
	mock := &MockTransactionsRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsRepo) EXPECT() *MockTransactionsRepoMockRecorder {
	return m.recorder
}

// DeleteTransaction mocks base method.
func (m *MockTransactionsRepo) DeleteTransaction(ctx context.Context, dbtx *sqlx.Tx, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", ctx, dbtx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockTransactionsRepoMockRecorder) DeleteTransaction(ctx, dbtx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockTransactionsRepo)(nil).DeleteTransaction), ctx, dbtx, id)
}

// GetAllTransactions mocks base method.
func (m *MockTransactionsRepo) GetAllTransactions(ctx context.Context) ([]*models.TransactionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactions", ctx)
	ret0, _ := ret[0].([]*models.TransactionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactions indicates an expected call of GetAllTransactions.
func (mr *MockTransactionsRepoMockRecorder) GetAllTransactions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactions", reflect.TypeOf((*MockTransactionsRepo)(nil).GetAllTransactions), ctx)
}

// GetTransactionByID mocks base method.
func (m *MockTransactionsRepo) GetTransactionByID(ctx context.Context, id int64) (*models.TransactionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ctx, id)
	ret0, _ := ret[0].(*models.TransactionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionsRepoMockRecorder) GetTransactionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionsRepo)(nil).GetTransactionByID), ctx, id)
}

// InsertTransaction mocks base method.
func (m *MockTransactionsRepo) InsertTransaction(ctx context.Context, dbtx *sqlx.Tx, req *models.TransactionModel) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, dbtx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockTransactionsRepoMockRecorder) InsertTransaction(ctx, dbtx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTransactionsRepo)(nil).InsertTransaction), ctx, dbtx, req)
}

// StartTx mocks base method.
func (m *MockTransactionsRepo) StartTx(ctx context.Context) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTx", ctx)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTx indicates an expected call of StartTx.
func (mr *MockTransactionsRepoMockRecorder) StartTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTx", reflect.TypeOf((*MockTransactionsRepo)(nil).StartTx), ctx)
}

// UpdateTransaction mocks base method.
func (m *MockTransactionsRepo) UpdateTransaction(ctx context.Context, dbtx *sqlx.Tx, req *models.TransactionModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", ctx, dbtx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionsRepoMockRecorder) UpdateTransaction(ctx, dbtx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactionsRepo)(nil).UpdateTransaction), ctx, dbtx, req)
}
